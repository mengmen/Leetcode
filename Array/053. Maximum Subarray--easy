//分而治之，动态规划
//dp存的是，连上当前nums[i]时的最大子串，有两种情况：它连上之前的子串，或者它自己。
//当前的最大子串也有两种情况：包含nums[i]的子串，或者不包含nums[i]的历史最大子串。

/**053. Maximum Subarray--easy
Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
the contiguous subarray [4,-1,2,1] has the largest sum = 6.
*/
//12ms
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        if(nums.size()==0) return 0;
        int maxsum=nums[0];
        vector<int> dp;
        dp.push_back(nums[0]);
        for(int i=1;i<nums.size();i++)
        {
            dp.push_back(nums[i]+(dp[i-1]>0?dp[i-1]:0));
            maxsum=maxsum>dp[i]?maxsum:dp[i];
        }
        return maxsum;
    }
};
