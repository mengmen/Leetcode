/**
找到不可重复的绝对距离为k的pair数。
k=0时，关键在找到重复数字的个数，且注意如1 1 1 1这样的情况下输出为1；
k!=0时，去掉重复，再用unordered_map求解；
*/
/**532. K-diff Pairs in an Array--easy
Given an array of integers and an integer k, you need to find the number of unique k-diff pairs in the array. Here a k-diff pair is defined as an integer pair (i, j), where i and j are both numbers in the array and their absolute difference is k.

Example 1:
Input: [3, 1, 4, 1, 5], k = 2
Output: 2
Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).
Although we have two 1s in the input, we should only return the number of unique pairs.
Example 2:
Input:[1, 2, 3, 4, 5], k = 1
Output: 4
Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).
Example 3:
Input: [1, 3, 1, 5, 4], k = 0
Output: 1
Explanation: There is one 0-diff pair in the array, (1, 1).
Note:
The pairs (i, j) and (j, i) count as the same pair.
The length of the array won't exceed 10,000.
All the integers in the given input belong to the range: [-1e7, 1e7].
*/


class Solution {
public:
    int findPairs(vector<int>& nums, int k) {
        if(nums.size()<2||k<0) return 0;
        int x = 0;
        sort(nums.begin(), nums.end());
        if (k == 0){
            int tmp = nums[0];
            int label = 0;
            for (int i = 1; i < nums.size(); i++){
                if (nums[i] == tmp){
                    label = 1;
                }
                else{
                    x += label;
                    label = 0;
                    tmp = nums[i];
                }
            }
            if (nums[nums.size() - 1] == tmp){
                x += label;
            }
            return x;
        }
        vector<int>::iterator it = unique(nums.begin(), nums.end());
        nums.erase(it, nums.end());
        unordered_map<int, int> maps;
        for (int i = 0; i<nums.size(); i++){
            int target = nums[i] - k;
            auto a = maps.find(nums[i] + k);
            auto b = maps.find(target);
            if (a != maps.end() && (a->second) == nums[i]){
                x++;
            }
            else if (b != maps.end() && (b->second) == (target - k)){
                x++;
            }
            maps[nums[i]] = target;
        }
        return x;
    }
};
