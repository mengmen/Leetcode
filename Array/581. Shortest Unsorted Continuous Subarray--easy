/**
先找到数组首尾有序的部分，
再从中间的乱序部分找到最大最小值，
然后反推首尾数组中是否有该归到乱序数组中的数（比最小值大，和比最小值小 的数）
*/
/**581. Shortest Unsorted Continuous Subarray--easy
Given an integer array, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order, too.

You need to find the shortest such subarray and output its length.

Example 1:
Input: [2, 6, 4, 8, 10, 9, 15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.
Note:
Then length of the input array is in range [1, 10,000].
The input array may contain duplicates, so ascending order here means <=.
*/

//mine
class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        if(nums.size()<2) return 0;
        int x=0;
        vector<int> dst;
        dst.assign(nums.begin(),nums.end());
        sort(nums.begin(),nums.end());
        int s=0,e=nums.size()-1;
        while(s<=e){
            if(nums[s]!=dst[s]&&nums[e]!=dst[e]){
                break;
            }
            if(nums[s]==dst[s]){
                s++;
            }
            else if(nums[e]==dst[e]){
                e--;
            }
        }
        return e-s+1;
    }
};

//O(n) time O(1) space 39ms
class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        if(nums.size()<2) return 0;
        int n=nums.size();
        int left=0,right=n-1;
        while(left<n-1&&nums[left]<=nums[left+1]) ++left;  //找到乱序子数组的左端
        if(left==n-1) return 0;
        while(nums[right]>=nums[right-1]) --right;//找到乱序子数组右端
        int rmin=INT_MAX,lmax=INT_MIN;
        for(int i=left;i<=right;i++){
            if(nums[i]<rmin) rmin=nums[i];//找到乱序子数组的最小值
            if(nums[i]>lmax) lmax=nums[i];//找到乱序子数组的最大值
        }
        while(left>=0&&nums[left]>rmin) --left;//从左侧有序数的最大值开始找，如果找到比子数组最小值要大的数，则归到子数组中
        while(right<=n-1&&nums[right]<lmax) ++right;//从右侧有序数中的最小值开始找，找到比子组最大值要小的数，则归到子数组中
        
        return right-left-1;
    }
};
