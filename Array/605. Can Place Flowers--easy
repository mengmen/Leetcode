//巧用continue
/**605. Can Place Flowers--easy
Suppose you have a long flowerbed in which some of the plots are planted and some are not. However, flowers cannot be planted in adjacent plots - they would compete for water and both would die.

Given a flowerbed (represented as an array containing 0 and 1, where 0 means empty and 1 means not empty), and a number n, return if n new flowers can be planted in it without violating the no-adjacent-flowers rule.

Example 1:
Input: flowerbed = [1,0,0,0,1], n = 1
Output: True
Example 2:
Input: flowerbed = [1,0,0,0,1], n = 2
Output: False
Note:
The input array won't violate no-adjacent-flowers rule.
The input array size is in the range of [1, 20000].
n is a non-negative integer which won't exceed the input array size.
*/

//19ms
class Solution {
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {
        int s=flowerbed.size();
        if(n==0){
            return true;
        }
        if(s==1&&flowerbed[0]==1){
            return false;
        }
        int i=0;
        int tmp=0;
        int label=0;
        if(flowerbed[0]==0) ++tmp;
        while(i<flowerbed.size()){
            while(i<flowerbed.size()&&flowerbed[i]==0){
                ++tmp;
                ++i;
                label=1;
            }
            if(label==0){++i;}
            else{
                if(i<flowerbed.size()){
                    n-=(tmp-1)/2;
                }
                else{
                    n-=tmp/2;
                }
                if(n<=0) return true;
                tmp=0;
                label=0;
            }
        }
        
        return false;
    }
};

//16ms 
class Solution {
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {
        if (n <= 0) return true;
        int planted = 0;
        // Try to plant flower greedily.
        for (int i = 0; i != flowerbed.size(); ++i) {
            if (flowerbed[i] == 1) continue;
            if (i > 0 && flowerbed[i - 1] == 1) continue;
            if (i < flowerbed.size() - 1 && flowerbed[i + 1] == 1) continue;
            flowerbed[i] = 1;
            ++planted;
            if (planted >= n) break;
        }
        return planted == n;
    }
};
