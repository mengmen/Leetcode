/**只有一个数大于后面的数时，有两种特殊情况：
第一种：i-1比i+1小，把i改成i+1即可
eg1: 3545 return true
第二种：i-1比i+1大，把i+1改成i
eg2:3423 return flase
eg3:3424 return true
*/
/**665. Non-decreasing Array--easy
Given an array with n integers, your task is to check if it could become non-decreasing by modifying at most 1 element.

We define an array is non-decreasing if array[i] <= array[i + 1] holds for every i (1 <= i < n).

Example 1:
Input: [4,2,3]
Output: True
Explanation: You could modify the first 4 to 1 to get a non-decreasing array.
Example 2:
Input: [4,2,1]
Output: False
Explanation: You can't get a non-decreasing array by modify at most one element.
Note: The n belongs to [1, 10,000].
*/

class Solution {
public:
    bool checkPossibility(vector<int>& nums) {
        if(nums.size()<2) return true;
        int n=0;
        int tmp=-1;
        for(int i=0;i<nums.size()-1;i++){
            if(nums[i]>nums[i+1]){
                n++;
                if(i-1<0 || nums[i-1] <= nums[i+1]) nums[i] = nums[i+1];                    //modify nums[i-1] of a priority
                else nums[i+1] = nums[i];
            }
        }
        if(n>1) return false;
        return true;
    }
};
